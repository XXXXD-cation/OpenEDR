name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

    - name: Run Go linters
      run: |
        golangci-lint run ./...

    - name: Install frontend dependencies
      working-directory: ./web
      run: npm ci

    - name: Run frontend linters
      working-directory: ./web
      run: |
        npm run lint
        npm run type-check

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [agent, server, shared]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run tests
      run: |
        cd ${{ matrix.component }}
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./${{ matrix.component }}/coverage.out
        flags: ${{ matrix.component }}
        name: ${{ matrix.component }}-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install dependencies
      working-directory: ./web
      run: npm ci

    - name: Run tests
      working-directory: ./web
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./web/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, test-frontend]
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: windows
            arch: amd64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Build Agent
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        cd agent
        go build -v -o ../bin/openedr-agent-${{ matrix.os }}-${{ matrix.arch }} ./cmd/agent

    - name: Build Server
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        cd server
        go build -v -o ../bin/openedr-server-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server

    - name: Build Frontend (once)
      if: matrix.os == 'linux' && matrix.arch == 'amd64'
      working-directory: ./web
      run: |
        npm ci
        npm run build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openedr-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          bin/openedr-agent-${{ matrix.os }}-${{ matrix.arch }}
          bin/openedr-server-${{ matrix.os }}-${{ matrix.arch }}

    - name: Upload frontend artifacts
      if: matrix.os == 'linux' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: openedr-frontend
        path: web/build/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run gosec security scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec-results.sarif ./...

    - name: Upload gosec results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'gosec-results.sarif' 